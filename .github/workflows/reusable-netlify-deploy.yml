name: Netlify Deploy

on:
  workflow_call:
    inputs:
      application:
        required: true
        type: string
      site_id:
        required: true
        type: string
      build_command:
        required: true
        type: string
      should_deploy_to_production:
        required: true
        type: boolean
env:
  PR_ID: ${{ github.event.number }}

permissions:
  pull-requests: write
  issues: write
jobs:
  netlify-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20.14.0"
      - name: Install dependencies
        run: npm ci

      - name: Install Netlify
        run: npm install netlify-cli@17.10.1 -g

      - name: Create build file
        run: |
          echo "[build]" > .netlify.toml
          echo '  command = "export REACT_APP_NETLIFY_BUILD_ID=$BUILD_ID && export REACT_APP_NETLIFY_COMMIT_REF=$COMMIT_REF && npm run ${{inputs.build_command}}"' >> .netlify.toml
          cat .netlify.toml

      - name: Deploy to Netlify
        id: netlify_deploy
        run: |
          prod_flag=""
          if [ "${{ inputs.should_deploy_to_production }}" = true ]; then prod_flag="--prod"; fi
          netlify deploy \
            --alias deploy-preview-$PR_ID \
            --build \
            --site ${{ inputs.site_id }} \
            --auth ${{ secrets.NETLIFY_AUTH_TOKEN }} \
            $prod_flag  \
            --json \
            > deploy_output.json

      - name: Generate URL Preview
        id: url_preview
        if: ${{ !inputs.should_deploy_to_production }}
        run: |
          NETLIFY_PREVIEW_URL=$(jq -r '.deploy_url' deploy_output.json)
          echo "NETLIFY_PREVIEW_URL=$NETLIFY_PREVIEW_URL" >> "$GITHUB_OUTPUT"

      - name: Comment URL Preview on PR
        uses: actions/github-script@v7
        if: ${{ !inputs.should_deploy_to_production }}
        env:
          NETLIFY_PREVIEW_URL: ${{ steps.url_preview.outputs.NETLIFY_PREVIEW_URL }}
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existingComment = comments.find(comment => 
              comment.body.startsWith('Preview URL:')
            );

            if (!existingComment) {

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: inputs.environment + ' Preview URL for ' + inputs.application + ': ' + process.env.NETLIFY_PREVIEW_URL
              });
            } else {
              console.log('Preview URL comment already exists. Skipping.');
            }
